/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app.index'
import { Route as AuthSignUpImport } from './routes/auth.sign-up'
import { Route as AuthSignInImport } from './routes/auth.sign-in'
import { Route as AuthResetPasswordImport } from './routes/auth.reset-password'
import { Route as AuthForgotPasswordImport } from './routes/auth.forgot-password'
import { Route as AppStandingsImport } from './routes/app.standings'
import { Route as AppSettingsImport } from './routes/app.settings'
import { Route as AppMyBracketsImport } from './routes/app.my-brackets'
import { Route as AppGroupsImport } from './routes/app.groups'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const AppStandingsRoute = AppStandingsImport.update({
  id: '/standings',
  path: '/standings',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)

const AppMyBracketsRoute = AppMyBracketsImport.update({
  id: '/my-brackets',
  path: '/my-brackets',
  getParentRoute: () => AppRoute,
} as any)

const AppGroupsRoute = AppGroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/app/groups': {
      id: '/app/groups'
      path: '/groups'
      fullPath: '/app/groups'
      preLoaderRoute: typeof AppGroupsImport
      parentRoute: typeof AppImport
    }
    '/app/my-brackets': {
      id: '/app/my-brackets'
      path: '/my-brackets'
      fullPath: '/app/my-brackets'
      preLoaderRoute: typeof AppMyBracketsImport
      parentRoute: typeof AppImport
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppImport
    }
    '/app/standings': {
      id: '/app/standings'
      path: '/standings'
      fullPath: '/app/standings'
      preLoaderRoute: typeof AppStandingsImport
      parentRoute: typeof AppImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppGroupsRoute: typeof AppGroupsRoute
  AppMyBracketsRoute: typeof AppMyBracketsRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppStandingsRoute: typeof AppStandingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppGroupsRoute: AppGroupsRoute,
  AppMyBracketsRoute: AppMyBracketsRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppStandingsRoute: AppStandingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/groups': typeof AppGroupsRoute
  '/app/my-brackets': typeof AppMyBracketsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/standings': typeof AppStandingsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/app/': typeof AppIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/app/groups': typeof AppGroupsRoute
  '/app/my-brackets': typeof AppMyBracketsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/standings': typeof AppStandingsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/app': typeof AppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/groups': typeof AppGroupsRoute
  '/app/my-brackets': typeof AppMyBracketsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/standings': typeof AppStandingsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/app/': typeof AppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/app/groups'
    | '/app/my-brackets'
    | '/app/settings'
    | '/app/standings'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/app/groups'
    | '/app/my-brackets'
    | '/app/settings'
    | '/app/standings'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/app/groups'
    | '/app/my-brackets'
    | '/app/settings'
    | '/app/standings'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/groups",
        "/app/my-brackets",
        "/app/settings",
        "/app/standings",
        "/app/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/reset-password",
        "/auth/sign-in",
        "/auth/sign-up"
      ]
    },
    "/app/groups": {
      "filePath": "app.groups.tsx",
      "parent": "/app"
    },
    "/app/my-brackets": {
      "filePath": "app.my-brackets.tsx",
      "parent": "/app"
    },
    "/app/settings": {
      "filePath": "app.settings.tsx",
      "parent": "/app"
    },
    "/app/standings": {
      "filePath": "app.standings.tsx",
      "parent": "/app"
    },
    "/auth/forgot-password": {
      "filePath": "auth.forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/reset-password": {
      "filePath": "auth.reset-password.tsx",
      "parent": "/auth"
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx",
      "parent": "/auth"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx",
      "parent": "/auth"
    },
    "/app/": {
      "filePath": "app.index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
